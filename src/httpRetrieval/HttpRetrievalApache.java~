package httpRetrieval;

import logger.Logger;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpVersion;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.params.ConnManagerParams;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpParams;
import org.apache.http.params.HttpProtocolParams;
import org.apache.http.util.EntityUtils;

import valueObject.Link;
import config.ConfigSearch;
import exception.SpiderDataException;

//this class retrieves content over http using the apache httpClient
public class HttpRetrievalApache implements HttpRetrievalInt
{
	private static HttpRetrievalApache httpRetrieval = new HttpRetrievalApache();
	private HttpClient httpClient;
	
	//this must be called before class can be used. It can be called multiple times but isn't thread safe
	public void init(ConfigSearch conf)
	{
		//if init has already been run then there isn't anything to do
		if(httpClient != null)
			return;
		
		// Create and initialize HTTP parameters
		HttpParams params = new BasicHttpParams();
		ConnManagerParams.setMaxTotalConnections(params, 50);
		ConnManagerParams.setTimeout(params, conf.getPageTimeout());
		HttpProtocolParams.setVersion(params, HttpVersion.HTTP_1_1);
		
		 
		// Create and initialize scheme registry
		//do I need this?
		SchemeRegistry schemeRegistry = new SchemeRegistry();
		schemeRegistry.register(
		        new Scheme("http", PlainSocketFactory.getSocketFactory(), 80));
		schemeRegistry.register(
		        new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
		
		// Create an HttpClient with the ThreadSafeClientConnManager.
		// This connection manager must be used if more than one thread will
		// be using the HttpClient.
		ClientConnectionManager cm = new ThreadSafeClientConnManager(params, schemeRegistry);
		
		httpClient = new DefaultHttpClient(cm, params);
	}
	
	public static HttpRetrievalInt getInstance() {return httpRetrieval;}

	//this method returns a page in byte [] form using the apache http client
	@Override
	public byte[] getPage(Link link) throws SpiderDataException
	{
		if(httpClient == null)
			throw new SpiderDataException(this.getClass().getSimpleName(), "getPage" , "HttpClient wasn't initilized, need to call init() method of this class", "no error thrown");
		
		byte[] bytes = null;
		HttpGet httpGet = null;

        try 
        {    
            // execute the method
        	httpGet = new HttpGet(link.getUrl());
            HttpResponse response = httpClient.execute(httpGet);
            
            // get the response body as an array of bytes
            HttpEntity entity = response.getEntity();

            if (entity != null)
                bytes = EntityUtils.toByteArray(entity);
            
        } catch (Exception e) 
        {
            if(httpGet != null)
            	httpGet.abort();
            if(link != null)
            	Logger.log(0, this.getClass().getSimpleName(), "getPage", "failure retrieving page: " + link.getUrl() + " error: " + e.toString());
            else
            	Logger.log(0, this.getClass().getSimpleName(), "getPage", "failure, link was null, error: " + e.toString());
        }
        
		return bytes;
	}
}
